@model dynamic

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("https://fonts.googleapis.com/css?family=Open+Sans:100,300,400,600")
@Styles.Render("http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css")
@*<link href="https://fonts.googleapis.com/css?family=Open+Sans:100,300,400,600" rel="stylesheet" type="text/css">
<link href="http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css" rel="stylesheet" type="text/css">*@

<div class="top">
    <div class="budget">
        <div class="budget__title">
            <h4>Available Budget in <span class="budget__title--month">%Month%</span>:</h4>
        </div>

        <div class="budget__value">+ 2,345.64</div>

        <div class="budget__income clearfix">
            <div class="budget__income--text">Income</div>
            <div class="right">
                <div class="budget__income--value">+ 4,300.00</div>
                <div class="budget__income--percentage">&nbsp;</div>
            </div>
        </div>

        <div class="budget__expenses clearfix">
            <div class="budget__expenses--text">Expenses</div>
            <div class="right clearfix">
                <div class="budget__expenses--value">- 1,954.36</div>
                <div class="budget__expenses--percentage">45%</div>
            </div>
        </div>
    </div>
</div>



<div class="bottom">
    <div class="add">
        <div class="add__container">
            <select class="add__type">
                <option value="inc" selected>+</option>
                <option value="exp">-</option>
            </select>
            <input type="text" class="add__description" placeholder="Add description">
            <input type="number" class="add__value" placeholder="Value">
            <button class="add__btn"><i class="ion-ios-checkmark-outline"></i></button>
        </div>
    </div>

    <div class="container clearfix">
        <div class="income">
            <h2 class="icome__title">Income</h2>

            <div class="income__list">

                <!--
                <div class="item clearfix" id="income-0">
                    <div class="item__description">Salary</div>
                    <div class="right clearfix">
                        <div class="item__value">+ 2,100.00</div>
                        <div class="item__delete">
                            <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                        </div>
                    </div>
                </div>

                <div class="item clearfix" id="income-1">
                    <div class="item__description">Sold car</div>
                    <div class="right clearfix">
                        <div class="item__value">+ 1,500.00</div>
                        <div class="item__delete">
                            <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                        </div>
                    </div>
                </div>
                -->

            </div>
        </div>



        <div class="expenses">
            <h2 class="expenses__title">Expenses</h2>

            <div class="expenses__list">

                <!--
                <div class="item clearfix" id="expense-0">
                    <div class="item__description">Apartment rent</div>
                    <div class="right clearfix">
                        <div class="item__value">- 900.00</div>
                        <div class="item__percentage">21%</div>
                        <div class="item__delete">
                            <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                        </div>
                    </div>
                </div>

                <div class="item clearfix" id="expense-1">
                    <div class="item__description">Grocery shopping</div>
                    <div class="right clearfix">
                        <div class="item__value">- 435.28</div>
                        <div class="item__percentage">10%</div>
                        <div class="item__delete">
                            <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                        </div>
                    </div>
                </div>
                -->

            </div>
        </div>
    </div>


</div>

@section Scripts
{
    <script>
        var budgetController = (function () {

            var Expense = function (id, description, value) {
                this.id = id;
                this.description = description;
                this.value = value;
                this.percentage = -1;
            };

            Expense.prototype.calcPercentage = function (totalIncome) {
                if (totalIncome > 0) {
                    this.percentage = Math.round((this.value / totalIncome) * 100);
                } else {
                    this.percentage = -1;
                }

            };

            Expense.prototype.getPercentage = function () {
                return this.percentage;
            }

            var Income = function (id, description, value) {
                this.id = id;
                this.description = description;
                this.value = value;
            };

            var data = {
                allItems: {
                    exp: [],
                    inc: []
                },
                totals: {
                    exp: 0,
                    inc: 0
                },
                budget: 0,
                percentage: -1
            };

            var calculateTotal = function (type) {
                var sum = 0;
                data.allItems[type].forEach(function (cur) {
                    sum += cur.value;
                });
                data.totals[type] = sum;
            };

            return {
                addItem: function (type, des, val) {
                    var newItem, ID;

                    //create new ID
                    if (data.allItems[type].length > 0) {
                        ID = data.allItems[type][data.allItems[type].length - 1].id + 1;
                    } else {
                        ID = 0;
                    }

                    //create new item based on type
                    if (type === 'exp') {
                        newItem = new Expense(ID, des, val);
                    } else if (type === 'inc') {
                        newItem = new Income(ID, des, val);
                    }

                    //push into data structure
                    data.allItems[type].push(newItem);

                    //return the new element
                    return newItem;
                },
                deleteItem: function (type, id) {
                    var ids, index;

                    ids = data.allItems[type].map(function (current) {
                        return current.id;
                    });

                    index = ids.indexOf(id);

                    if (index !== -1) {
                        data.allItems[type].splice(index, 1);
                    }

                },
                calculateBudget: function () {
                    // calculate total income and expenses
                    calculateTotal('exp');
                    calculateTotal('inc');

                    // Calculate the budget: income - expenses
                    data.budget = data.totals.inc - data.totals.exp;

                    //calculate the percentage of income that we spent
                    if (data.totals.inc > 0) {
                        data.percentage = Math.round((data.totals.exp / data.totals.inc) * 100);
                    } else {
                        data.percentage = -1;
                    }


                },
                calculatePercentages: function () {
                    data.allItems.exp.forEach(function (cur) {
                        cur.calcPercentage(data.totals.inc);
                    })
                },
                getPercentages: function () {
                    var percentages = data.allItems.exp.map(function (cur) {
                        return cur.getPercentage();
                    });
                    return percentages;
                },
                getBudget: function () {
                    return {
                        budget: data.budget,
                        totalInc: data.totals.inc,
                        totalExp: data.totals.exp,
                        percentage: data.percentage
                    };
                },
                testing: function () {
                    console.log(data);
                }
            };

        })();

        //UI Controller
        var UIController = (function () {
            var DOMstrings = {
                inputType: '.add__type',
                inputDescription: '.add__description',
                inputValue: '.add__value',
                inputBtn: '.add__btn',
                incomeContainer: '.income__list',
                expensesContainer: '.expenses__list',
                budgetLabel: '.budget__value',
                incomeLabel: '.budget__income--value',
                expensesLabel: '.budget__expenses--value',
                percentageLabel: '.budget__expenses--percentage',
                container: '.container',
                expensesPercentageLabel: '.item__percentage',
                dateLabel: '.budget__title--month'
            };

            var formatNumber = function (num, type) {
                var numSplit, int, dec;

                num = Math.abs(num); //absolute number
                num = num.toFixed(2); //only 2 decimals

                numSplit = num.split('.');
                int = numSplit[0]; //integer part of num
                if (int.length > 3) {
                    int = int.substr(0, int.length - 3) + ',' + int.substr(int.length - 3, 3);
                }

                dec = numSplit[1]; //decimal part of num

                return (type === 'exp' ? '-' : '+') + ' ' + int + '.' + dec;
            };

            var nodeListForEach = function (list, callback) {
                for (var i = 0; i < list.length; i++) {
                    callback(list[i], i);
                }
            };

            return {
                getInput: function () {
                    return {
                        type: document.querySelector(DOMstrings.inputType).value, //either inc or exp
                        description: document.querySelector(DOMstrings.inputDescription).value,
                        value: parseFloat(document.querySelector(DOMstrings.inputValue).value)
                    };
                },
                addListItem: function (obj, type) {
                    var html, newHtml, element;

                    // Create HTML string with placeholder text

                    if (type === 'inc') {
                        element = DOMstrings.incomeContainer;
                        html = '<div class="item clearfix" id="inc-%id%"> <div class="item__description">%description%</div><div class="right clearfix"> <div class="item__value">%value%</div><div class="item__delete"><button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div> </div></div>';
                    } else if (type === 'exp') {
                        element = DOMstrings.expensesContainer;
                        html = '<div class="item clearfix" id="exp-%id%"><div class="item__description">%description%</div><div class="right clearfix"><div class="item__value">%value%</div><div class="item__percentage">21%</div><div class="item__delete"><button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div> </div></div>';
                    }

                    // Replace placeholder text with data
                    newHtml = html.replace('%id%', obj.id)
                        .replace('%description%', obj.description)
                        .replace('%value%', formatNumber(obj.value, type));

                    // Insert the HTML into DOM
                    document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);

                },
                deleteListItem: function (selectorId) {
                    var el = document.getElementById(selectorId)
                    el.parentNode.removeChild(el);


                },
                clearFields: function () {
                    var fields, fieldsArr;

                    //fields = document.querySelectorAll(DOMstrings.inputDescription + ', ' +  DOMstrings.inputValue);
                    fieldsArr = Array.prototype.slice.call(document.querySelectorAll(DOMstrings.inputDescription + ', ' + DOMstrings.inputValue));

                    fieldsArr.forEach(function (current, index, array) {
                        current.value = "";
                    });

                    fieldsArr[0].focus();

                },
                displayBudget: function (obj) {
                    var type;
                    obj.budget > 0 ? type = 'inc' : type = 'exp'

                    document.querySelector(DOMstrings.budgetLabel).textContent = formatNumber(obj.budget, type);
                    document.querySelector(DOMstrings.incomeLabel).textContent = formatNumber(obj.totalInc, 'inc');
                    document.querySelector(DOMstrings.expensesLabel).textContent = formatNumber(obj.totalExp, 'exp');

                    if (obj.percentage > 0) {
                        document.querySelector(DOMstrings.percentageLabel).textContent = obj.percentage + '%';
                    } else {
                        document.querySelector(DOMstrings.percentageLabel).textContent = '---';
                    }
                },
                displayPercentages: function (percentages) {
                    var fields = document.querySelectorAll(DOMstrings.expensesPercentageLabel);

                    nodeListForEach(fields, function (current, index) {
                        if (percentages[index] > 0) {
                            current.textContent = percentages[index] + '%';
                        } else {
                            current.textContent = '---';
                        }

                    });
                },
                displayMonth: function () {
                    var now, year, month, months;
                    now = new Date(); //new Date(year, month, day)

                    months = ['January', 'Febuary', 'March', 'April', 'May', ' June', 'July', 'August', 'September', 'October', 'November', 'December'];
                    month = now.getMonth();
                    year = now.getFullYear();

                    document.querySelector(DOMstrings.dateLabel).textContent = months[month] + ' ' + year;

                },
                changedType: function () {
                    var fields = document.querySelectorAll(
                        DOMstrings.inputType + ', ' +
                        DOMstrings.inputDescription + ',' +
                        DOMstrings.inputValue
                    );

                    nodeListForEach(fields, function (cur) {
                        cur.classList.toggle('red-focus');
                    });

                    document.querySelector(DOMstrings.inputBtn).classList.toggle('red');

                },
                getDOMstrings: function () {
                    return DOMstrings;
                }
            };

        })();

        //Global APP Controller
        var controller = (function (budgetCtrl, UICtrl) {

            var setupEventListeners = function () {
                var DOM = UICtrl.getDOMstrings();

                document.querySelector(DOM.inputBtn).addEventListener('click', ctrlAddItem);

                //this adds the event on the whole document, aka the whole page
                document.addEventListener('keypress', function (e) {

                    if (e.keyCode === 13 || e.which === 13) {
                        ctrlAddItem();
                    }

                });

                document.querySelector(DOM.container).addEventListener('click', ctrlDeleteItem);

                document.querySelector(DOM.inputType).addEventListener('change', UICtrl.changedType);

            };

            var updatePercentages = function () {
                //1. Calculate Percentages
                budgetCtrl.calculatePercentages();

                //2. Read percentages from the budget controller
                var percentages = budgetCtrl.getPercentages();

                //3. Update UI
                UICtrl.displayPercentages(percentages);
            }

            var updateBudget = function () {

                //1. Calculate the budget
                budgetCtrl.calculateBudget();

                //2. Return the budget
                var budget = budgetCtrl.getBudget();

                //3. Display budget on UI
                UICtrl.displayBudget(budget);

            };

            var ctrlAddItem = function () {
                var input, newItem;

                //1. Get the field input data
                input = UICtrl.getInput();

                if (input.description !== "" && !isNaN(input.value) && input.value > 0) {
                    //2. Add the item to the budget controller
                    newItem = budgetCtrl.addItem(input.type, input.description, input.value);

                    //3. Add the new item the UI
                    UICtrl.addListItem(newItem, input.type);

                    //4. Clear the fields
                    UICtrl.clearFields();

                    //5. Calculate and update budget
                    updateBudget();

                    //6. Calculate and Update percentages
                    updatePercentages();
                }

            };

            var ctrlDeleteItem = function (e) {
                var itemID, splitID, type, ID;

                itemID = e.target.parentNode.parentNode.parentNode.parentNode.id; //Not ideal to hardcode like this. But because we also hardcoded the HTML we are traversing, it is fine

                if (itemID) {
                    //inc-1
                    splitID = itemID.split('-');
                    type = splitID[0];
                    ID = parseInt(splitID[1]);

                    //1.Delete from data structure
                    budgetCtrl.deleteItem(type, ID);

                    //2. Delete from UI
                    UICtrl.deleteListItem(itemID);

                    //3. Update and show new budget
                    updateBudget();

                    //4. Calculate and Update percentages
                    updatePercentages();
                }
            }

            return {
                init: function () {
                    console.log('Application has started');
                    UICtrl.displayMonth();
                    UICtrl.displayBudget({
                        budget: 0,
                        totalInc: 0,
                        totalExp: 0,
                        percentage: -1
                    });
                    setupEventListeners();
                }
            };

        })(budgetController, UIController);

        controller.init();
    </script>
}


